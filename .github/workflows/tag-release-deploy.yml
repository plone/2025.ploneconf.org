name: Live tag release deploy

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

env:
  IMAGE_NAME_PREFIX: ghcr.io/plone/2025.ploneconf.org
  NODE_VERSION: "22.x"
  PYTHON_VERSION: "3.12"
  STACK_PARAM: latest
  STACK_NAME: 2025-ploneconf-org
  STACK_PREFIX: 2025_ploneconf
  PUBLIC_URL: 2025.ploneconf.org
  CERTRESOLVER: le-cloudflare
  STACK_FILE: devops/stacks/2025.ploneconf.org.yml

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.vars.outputs.TAG }}
      BASE_TAG: ${{ steps.vars.outputs.BASE_TAG }}
      IMAGE_NAME_PREFIX: ${{ env.IMAGE_NAME_PREFIX }}
      NODE_VERSION: ${{ env.NODE_VERSION }}
      PYTHON_VERSION: ${{ env.PYTHON_VERSION }}
      PLONE_VERSION: ${{ steps.vars.outputs.PLONE_VERSION }}
      VOLTO_VERSION: ${{ steps.vars.outputs.VOLTO_VERSION }}
      DEPLOY_ENVIRONMENT: ${{ steps.vars.outputs.DEPLOY_ENVIRONMENT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute several vars needed for the CI
        id: vars
        run: |
          echo "TAG=$(cat version.txt)" >> $GITHUB_OUTPUT
          echo "BASE_TAG=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "PLONE_VERSION=$(cat backend/version.txt)" >> $GITHUB_OUTPUT
          python3 -c 'import json; data = json.load(open("./frontend/mrs.developer.json")); print("VOLTO_VERSION=" + (data["core"].get("tag") or "latest"))' >> $GITHUB_OUTPUT
          echo "DEPLOY_ENVIRONMENT=${{ env.PUBLIC_URL }}" >> $GITHUB_OUTPUT

      - name: Test vars
        run: |
          echo 'TAG=${{ steps.vars.outputs.TAG }}'
          echo 'BASE_TAG=${{ steps.vars.outputs.BASE_TAG }}'
          echo 'PLONE_VERSION=${{ steps.vars.outputs.PLONE_VERSION }}'
          echo 'VOLTO_VERSION=${{ steps.vars.outputs.VOLTO_VERSION }}'

  backend:
    uses: ./.github/workflows/backend.yml
    needs:
        - config
    with:
        base-tag: ${{ needs.config.outputs.TAG }}
        image-name-prefix: ${{ needs.config.outputs.IMAGE_NAME_PREFIX }}
        image-name-suffix: backend
        python-version: ${{ needs.config.outputs.PYTHON_VERSION }}
        plone-version: ${{ needs.config.outputs.PLONE_VERSION }}
    permissions:
      contents: read
      packages: write

  frontend:
    uses: ./.github/workflows/frontend.yml
    needs:
        - config
    with:
        base-tag: ${{ needs.config.outputs.TAG }}
        image-name-prefix: ${{ needs.config.outputs.IMAGE_NAME_PREFIX }}
        image-name-suffix: frontend
        node-version: ${{ needs.config.outputs.NODE_VERSION }}
        volto-version: ${{ needs.config.outputs.VOLTO_VERSION }}
    permissions:
      contents: read
      packages: write

  deploy:
    needs: [config, backend, frontend]
    runs-on: ubuntu-latest
    environment:
        name: ${{ needs.config.outputs.DEPLOY_ENVIRONMENT }}
        url: https://${{ needs.config.outputs.DEPLOY_ENVIRONMENT }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Test vars
        run: |
          echo "DEPLOY_ENVIRONMENT=${{ needs.config.outputs.DEPLOY_ENVIRONMENT }}"
          echo "PLONE_VERSION=${{ needs.config.outputs.PLONE_VERSION }}"
          echo "VOlTO_VERSION=${{ needs.config.outputs.VOLTO_VERSION }}"
          echo "TAG=${{ needs.config.outputs.TAG }}"
          echo "BASE_TAG=${{ needs.config.outputs.BASE_TAG }}"  

      - name: Deploy
        uses: kitconcept/docker-stack-deploy@v1.2.0
        with:
          registry: 'ghcr.io'
          username: ${{ github.actor }}
          password: ${{ secrets.DEPLOY_GHCR_READ_TOKEN }}
          remote_host: ${{ vars.DEPLOY_HOST }}
          remote_port: ${{ vars.DEPLOY_PORT }}
          remote_user: ${{ vars.DEPLOY_USER }}
          remote_private_key: ${{ secrets.DEPLOY_SSH }}
          stack_file: ${{ env.STACK_FILE }}
          stack_name: ${{ env.STACK_NAME }}
          stack_param: ${{ needs.config.outputs.TAG }}
          env_file: |
            STACK_NAME=${{ env.STACK_NAME }}
            STACK_PREFIX=${{ env.STACK_PREFIX }}
            PUBLIC_URL=${{ env.PUBLIC_URL }}
            CERTRESOLVER=${{ env.CERTRESOLVER }}
            BACKEND_IMAGE=${{ env.IMAGE_NAME_PREFIX }}-backend
            FRONTEND_IMAGE=${{ env.IMAGE_NAME_PREFIX }}-frontend
            DB_HOST=${{ vars.DB_HOST }}
            DB_PORT=${{ vars.DB_PORT }}
            DB_NAME=${{ vars.DB_NAME }}
            DB_USER=${{ vars.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            BASIC_AUTH_USER=${{ vars.BASIC_AUTH_USER }}
            BASIC_AUTH_PASSWORD_FRONTEND=${{ vars.BASIC_AUTH_PASSWORD_FRONTEND }}
            BASIC_AUTH_PASSWORD_CLASSICUI=${{ vars.BASIC_AUTH_PASSWORD_CLASSICUI }}

          deploy_timeout: 480